import os
import subprocess
import sys
import shutil
import stat
from datetime import datetime
from urllib.parse import urlparse
from getpass import getuser

CONFIG_FILE = "config.txt"


def load_config():
    """Carrega as configura√ß√µes do arquivo config.txt."""
    if not os.path.exists(CONFIG_FILE):
        print(f"‚ùå Arquivo de configura√ß√£o '{CONFIG_FILE}' n√£o encontrado.")
        sys.exit(1)

    config = {}
    with open(CONFIG_FILE, "r") as file:
        for line in file:
            line = line.strip()
            if line and "=" in line:
                key, value = line.split("=", 1)
                config[key.strip()] = value.strip()
    return config


def get_repo_folder_name(repo_url: str):
    """Extrai o nome da pasta do reposit√≥rio a partir do URL."""
    parsed_url = urlparse(repo_url)
    repo_name = os.path.basename(parsed_url.path).replace(".git", "")
    return repo_name


def git_clone(repo_url: str, repo_dir: str):
    """Clona o reposit√≥rio dentro da pasta especificada."""
    if not os.path.exists(repo_dir):
        print("üì• Clonando o reposit√≥rio...")
        try:
            subprocess.run(["git", "clone", repo_url], check=True)
            print("‚úÖ Reposit√≥rio clonado com sucesso.")
        except subprocess.CalledProcessError:
            print("‚ùå Erro ao clonar o reposit√≥rio.")
            sys.exit(1)
    else:
        print(f"‚úÖ O reposit√≥rio j√° est√° clonado na pasta '{repo_dir}'.")


def git_command(repo_dir: str, command_list: list[str]):
    """Executa um comando git gen√©rico."""
    os.chdir(repo_dir)
    try:
        subprocess.run(command_list, check=True)
        print(f"‚úÖ {command_list[0]} conclu√≠do com sucesso.")
    except subprocess.CalledProcessError:
        print(f"‚ùå Erro ao executar {command_list[0]}.")
        os.chdir("..")
        sys.exit(1)
    os.chdir("..")


def has_changes(repo_dir: str):
    """Verifica se h√° altera√ß√µes n√£o commitadas no reposit√≥rio."""
    os.chdir(repo_dir)
    result = subprocess.run(["git", "status", "--porcelain"], stdout=subprocess.PIPE)
    os.chdir("..")
    return bool(result.stdout.strip())  # Se a sa√≠da n√£o for vazia, h√° altera√ß√µes


def git_pull(repo_url: str, repo_dir: str):
    """Realiza o git pull dentro da pasta do reposit√≥rio, ou clona o reposit√≥rio se a pasta n√£o existir."""
    if not os.path.exists(repo_dir):
        print(f"‚ùå O diret√≥rio do reposit√≥rio '{repo_dir}' n√£o existe.")
        print(f"üì• Clonando o reposit√≥rio '{repo_url}'...")
        git_clone(repo_url, repo_dir)  # Clona o reposit√≥rio se a pasta n√£o existir
        return  # Ap√≥s clonar, n√£o √© necess√°rio continuar com o git_pull

    git_command(repo_dir, ["git", "pull"])


def git_push(repo_dir: str):
    """Realiza o git push dentro da pasta do reposit√≥rio, avisando o usu√°rio em caso de falha e verificando se h√° altera√ß√µes no remoto antes de enviar."""
    if has_changes(repo_dir):
        os.chdir(repo_dir)

        # Primeiro, fazemos o git fetch para verificar se h√° altera√ß√µes no reposit√≥rio remoto
        try:
            subprocess.run(["git", "fetch"], check=True)
            print("üîÑ Atualiza√ß√µes do reposit√≥rio remoto baixadas com sucesso.")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao executar git fetch. Detalhes: {e}")
            os.chdir("..")
            sys.exit(1)

        # Comparamos se h√° altera√ß√µes no reposit√≥rio remoto em rela√ß√£o ao local
        result = subprocess.run(
            ["git", "log", "HEAD..origin/main", "--oneline"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )

        if result.stdout:
            print("üîÑ O reposit√≥rio remoto tem altera√ß√µes mais recentes.")
            print(
                "\nüõë Por favor, fa√ßa um git pull para atualizar seu reposit√≥rio local antes de enviar as altera√ß√µes."
            )
            os.chdir("..")
            return  # Cancela a opera√ß√£o de git push

        try:
            print("üì§ Executando git push...")
            subprocess.run(["git", "add", "."], check=True)
            subprocess.run(
                ["git", "commit", "-m", f"Atualiza√ß√£o: {get_datetime()}"], check=True
            )
            subprocess.run(["git", "push"], check=True)
            print("‚úÖ Push conclu√≠do com sucesso.")
        except subprocess.CalledProcessError as e:
            # Detectar erro espec√≠fico
            if "Authentication failed" in str(e):
                print(
                    "‚ùå Erro de autentica√ß√£o. Verifique suas credenciais e permiss√µes."
                )
            elif "Could not resolve host" in str(e):
                print("‚ùå Erro de conex√£o. Verifique sua conex√£o de rede.")
            elif "fatal: unable to access" in str(e):
                print(
                    "‚ùå O reposit√≥rio remoto n√£o est√° acess√≠vel. Verifique a URL do reposit√≥rio."
                )
            else:
                print(f"‚ùå Erro ao executar git push. Detalhes: {e}")
            os.chdir("..")
            sys.exit(1)
        os.chdir("..")
    else:
        print("‚ö†Ô∏è N√£o h√° altera√ß√µes para enviar. O reposit√≥rio j√° est√° atualizado.")


def force_remove(file_path: str):
    """For√ßa a remo√ß√£o de um arquivo, alterando suas permiss√µes, se necess√°rio."""
    if os.path.exists(file_path):
        # Altera as permiss√µes do arquivo para torn√°-lo remov√≠vel
        os.chmod(file_path, stat.S_IWRITE)
        try:
            os.remove(file_path)
            print(f"‚úÖ Arquivo removido: {file_path}")
        except OSError as e:
            print(f"‚ùå Erro ao remover o arquivo {file_path}: {e}")


def remove_repo_folder(repo_dir: str):
    """Remove a pasta do reposit√≥rio, mesmo que n√£o esteja vazia."""
    if os.path.exists(repo_dir):
        print(f"üóëÔ∏è Removendo a pasta do reposit√≥rio '{repo_dir}'...")
        try:
            # Tentando remover arquivos primeiro
            for root, dirs, files in os.walk(repo_dir, topdown=False):
                for name in files:
                    force_remove(os.path.join(root, name))
                for name in dirs:
                    try:
                        os.rmdir(os.path.join(root, name))
                    except OSError as e:
                        print(
                            f"‚ùå Erro ao remover o diret√≥rio {os.path.join(root, name)}: {e}"
                        )

            # Agora tenta remover a pasta principal
            shutil.rmtree(repo_dir)  # Remove a pasta e todo o seu conte√∫do
            print(f"‚úÖ Pasta '{repo_dir}' removida com sucesso.")
        except OSError as e:
            print(f"‚ùå Erro ao remover a pasta: {e}")
            sys.exit(1)
    else:
        print("‚ö†Ô∏è Pasta do reposit√≥rio n√£o encontrada.")


def open_save_folder(repo_dir: str = "", repo_folder: bool = False):
    if repo_folder:
        caminho = os.path.dirname(os.path.abspath(__file__))
        subprocess.run(f"cd /d {caminho}/{repo_dir} && explorer .", shell=True)
    else:
        caminho = f"C:/Users/{get_user()}/AppData/Roaming/.minecraft/saves"
        subprocess.run(f"cd /d {caminho} && explorer .", shell=True)


def get_datetime():
    data_atual = datetime.now()
    data_em_texto = data_atual.strftime("%d/%m/%Y - %H:%M")
    return data_em_texto


def get_user():
    usuario = getuser()
    return usuario


def main():
    # Carrega as configura√ß√µes do arquivo
    config = load_config()
    repo_url = str(config.get("REPO_URL"))

    if not repo_url:
        print("‚ùå Configura√ß√µes inv√°lidas no arquivo config.txt. Verifique REPO_URL.")
        sys.exit(1)

    # Obt√©m o nome da pasta do reposit√≥rio
    repo_dir = get_repo_folder_name(repo_url)

    # Clona o reposit√≥rio, se necess√°rio
    git_clone(repo_url, repo_dir)

    while True:
        # Menu de op√ß√µes para o usu√°rio
        print(f"\nBem-vindo, {get_user().capitalize()}.")
        print("\nEscolha uma op√ß√£o:")
        print("1. Baixar as altera√ß√µes mais recentes (git pull)")
        print("2. Enviar suas altera√ß√µes (git push)")
        print("3. Abrir pasta do save (PC)")
        print("4. Abrir pasta do save (Reposit√≥rio)")
        print("5. Remover pasta do save")
        print("0. Sair")

        choice = input("Digite o n√∫mero da sua escolha: ").strip()

        if choice == "1":
            git_pull(repo_url, repo_dir)
        elif choice == "2":
            git_push(repo_dir)
        elif choice == "3":
            print("Abrir pasta do save (PC)")
            open_save_folder()
        elif choice == "4":
            print("Abrir pasta do save (Reposit√≥rio)")
            open_save_folder(repo_dir, True)
        elif choice == "5":
            print("Remover reposit√≥rio")
            remove_repo_folder(repo_dir)
        elif choice == "0":
            print("üëã Saindo. At√© a pr√≥xima!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")


if __name__ == "__main__":
    main()
